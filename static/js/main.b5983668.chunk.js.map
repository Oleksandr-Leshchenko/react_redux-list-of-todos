{"version":3,"sources":["store/reducer.ts","store/index.ts","hooks/useTypedSelector.ts","api/user.ts","store/actions.ts","hooks/useActions.ts","components/User.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["ReducerActions","initialState","todos","loading","error","userId","store","createStore","state","action","type","FETCH_TODOS","FETCH_TODOS_SUCCESS","payload","FETCH_TODOS_ERROR","SET_USER_ID","applyMiddleware","thunk","useTypedSelector","useSelector","fetchUser","a","USER_URL","fetch","response","json","name","setUserIdAction","id","fetchTodosAction","fetchTodosSuccessAction","fetchTodosErrorAction","message","fetchTodos","dispatch","useActions","useDispatch","bindActionCreators","ActionCreators","User","useState","user","setUser","useEffect","currentUser","email","phone","onClick","TodoList","query","setQuery","status","setStatus","value","onChange","event","target","className","todosToFilter","filteredTodos","filter","todo","title","includes","completed","filterTodos","map","style","marginLeft","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b5983668.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\nexport enum ReducerActions {\n  FETCH_TODOS = 'FETCH_TODOS',\n  FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS',\n  FETCH_TODOS_ERROR = 'FETCH_TODOS_ERROR',\n  SET_USER_ID = 'SET_USER_ID',\n}\n\nconst initialState: State = {\n  todos: [],\n  loading: false,\n  error: null,\n  userId: 0,\n};\n\nexport const reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case ReducerActions.FETCH_TODOS:\n      return {\n        todos: [],\n        loading: true,\n        error: null,\n        userId: 0,\n      };\n\n    case ReducerActions.FETCH_TODOS_SUCCESS:\n      return {\n        todos: action.payload,\n        loading: false,\n        error: null,\n        userId: 0,\n      };\n\n    case ReducerActions.FETCH_TODOS_ERROR:\n      return {\n        todos: [],\n        loading: false,\n        error: action.payload,\n        userId: 0,\n      };\n\n    case ReducerActions.SET_USER_ID:\n      return {\n        ...state,\n        userId: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport type RootState = ReturnType<typeof reducer>;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { reducer } from './reducer';\n\nexport const store = createStore(reducer, applyMiddleware(thunk));\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { RootState } from '../store/reducer';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export const fetchUser = async (userId: number) => {\n  let USER_URL = 'https://mate.academy/students-api/users';\n\n  if (userId) {\n    USER_URL += `/${userId}`;\n  }\n\n  try {\n    const response = await fetch(USER_URL);\n\n    return await response.json();\n  } catch {\n    return { name: 'no user' };\n  }\n};\n","import { Dispatch } from 'react';\nimport { AnyAction } from 'redux';\nimport { ReducerActions } from './reducer';\n\nexport const setUserIdAction = (id: number) => {\n  return {\n    type: ReducerActions.SET_USER_ID,\n    payload: id,\n  };\n};\n\nexport const fetchTodosAction = () => {\n  return { type: ReducerActions.FETCH_TODOS };\n};\n\nexport const fetchTodosSuccessAction = (todos: Todo[]) => {\n  return {\n    type: ReducerActions.FETCH_TODOS_SUCCESS,\n    payload: todos,\n  };\n};\n\nexport const fetchTodosErrorAction = (message: string) => {\n  return {\n    type: ReducerActions.FETCH_TODOS_ERROR,\n    payload: message,\n  };\n};\n\nexport const fetchTodos = () => async (dispatch: Dispatch<AnyAction>) => {\n  const TODOS_URL = 'https://mate.academy/students-api/todos';\n  const todos = await (await fetch(TODOS_URL)).json();\n\n  try {\n    dispatch(fetchTodosAction());\n    dispatch(fetchTodosSuccessAction(todos));\n  } catch {\n    dispatch(fetchTodosErrorAction('Failed to fetch todos'));\n  }\n};\n","import { useDispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as ActionCreators from '../store/actions';\n\nexport const useActions = () => {\n  const dispatch = useDispatch();\n\n  return bindActionCreators(ActionCreators, dispatch);\n};\n","/* eslint-disable no-console */\nimport { useEffect, useState } from 'react';\nimport { fetchUser } from '../api/user';\nimport { useActions } from '../hooks/useActions';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\n\nexport const User: React.FC = () => {\n  const { userId }: State = useTypedSelector(state => state);\n  const [user, setUser] = useState<User | null>(null);\n  const { setUserIdAction } = useActions();\n\n  useEffect(() => {\n    (async function fetchData() {\n      const currentUser = await fetchUser(userId);\n\n      setUser(currentUser);\n    }());\n  }, [userId]);\n\n  if (!user) {\n    return <div>no user</div>;\n  }\n\n  return (\n    <div>\n      <h2>{user.name}</h2>\n      <article>\n        <p>{user.email}</p>\n        <p>{user.phone}</p>\n      </article>\n      <button\n        type=\"button\"\n        onClick={() => setUserIdAction(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useActions } from '../hooks/useActions';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport './TodoList.scss';\n\nexport const TodoList: React.FC = () => {\n  const {\n    todos,\n    loading,\n    error,\n  }: State = useTypedSelector(state => state);\n  const { fetchTodos, setUserIdAction } = useActions();\n  const [query, setQuery] = useState('');\n  const [status, setStatus] = useState('all');\n\n  const filterTodos = (todosToFilter: Todo[]) => {\n    const filteredTodos = todosToFilter.filter(todo => todo.title.includes(query));\n\n    switch (status) {\n      case 'true':\n        return filteredTodos.filter(todo => todo.completed === true);\n      case 'false':\n        return filteredTodos.filter(todo => todo.completed === false);\n      case 'all':\n      default:\n        return filteredTodos;\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  if (loading) {\n    return <div>Loading</div>;\n  }\n\n  if (error) {\n    return <div>{error}</div>;\n  }\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n        className=\"input is-small\"\n      />\n\n      <select\n        value={status}\n        onChange={(event) => setStatus(event.target.value)}\n        className=\"select\"\n      >\n        <option value=\"all\">all</option>\n        <option value=\"false\">active</option>\n        <option value=\"true\">completed</option>\n      </select>\n\n      <ul className=\"TodoList\">\n        {filterTodos(todos).map(todo => (\n          <li key={todo.id}>\n            {`${todo.title} ${todo.completed}`}\n            <button\n              type=\"button\"\n              className=\"button is-rounded is-info\"\n              style={{ marginLeft: '100px' }}\n              onClick={() => setUserIdAction(todo.userId)}\n            >\n              {` User #${todo.userId}`}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","/* eslint-disable no-console */\nimport { useTypedSelector } from './hooks/useTypedSelector';\nimport 'bulma/css/bulma.min.css';\n\nimport './App.scss';\nimport { User } from './components/User';\nimport { TodoList } from './components/TodoList';\n\nconst App = () => {\n  const { userId }: State = useTypedSelector(state => state);\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      <TodoList />\n      {userId !== 0 && <User />}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}